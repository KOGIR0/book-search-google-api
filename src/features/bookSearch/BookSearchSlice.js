import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  books: [],
  resultsCount: 0,
  status: "idle",
  inputValue: '',
  subject: '',
  order: 'relevance',
  startIndex: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchBooks = createAsyncThunk(
  'bookSearch/fetchBooks',
  async (searchParams) => {
    let url = "https://www.googleapis.com/books/v1/volumes?q=" + searchParams.query + 
            "+subject:" + searchParams.subject + "&orderBy=" + searchParams.order + 
            "&maxResults=30&startIndex=0&key=AIzaSyD4FoBuK8DU7An_yYeCpI4tYOxOXlxSfb4";
    const response = fetch(url).then((res) => res.json());
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const fetchMoreBooks = createAsyncThunk(
  'bookSearch/fetchMoreBooks',
  async (searchParams) => {
    let url = "https://www.googleapis.com/books/v1/volumes?q=" + searchParams.query + 
        "+subject:" + searchParams.subject + "&orderBy=" + searchParams.order + 
        "&maxResults=30&startIndex=" + searchParams.startIndex + 
        "&key=AIzaSyD4FoBuK8DU7An_yYeCpI4tYOxOXlxSfb4";
    const response = fetch(url).then((res) => res.json());
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
)

export const bookSearchSlice = createSlice({
  name: 'bookSearch',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setStartIndex: (state, action) => {
      state.startIndex = action.payload;
    },
    setOrder: (state, action) => {
      state.order = action.payload;
    },
    setSubject: (state, action) => {
      state.subject = action.payload;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    setInputValue: (state, action) => {
      state.inputValue = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchBooks.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchBooks.fulfilled, (state, action) => {
        state.status = 'idle';
        state.books = action.payload.items.map(item => {
          return {
            imageLinks: item.volumeInfo.imageLinks,
            title: item.volumeInfo.title,
            categories: item.volumeInfo.categories,
            authors: item.volumeInfo.authors,
            description: item.volumeInfo.description
          }
        });
        state.startIndex = state.books.length;
        state.resultsCount = action.payload.totalItems;
      })
      .addCase(fetchMoreBooks.fulfilled, (state, action) => {
        state.status = 'idle';
        state.books = [...state.books, ...action.payload.items.map(item => {
          return {
            imageLinks: item.volumeInfo.imageLinks,
            title: item.volumeInfo.title,
            categories: item.volumeInfo.categories,
            authors: item.volumeInfo.authors,
            description: item.volumeInfo.description
          }
        })];
        state.startIndex = state.books.length;
        state.resultsCount = action.payload.totalItems;
      });
  },
});

export const { setInputValue, setSubject, setOrder, setStartIndex } = bookSearchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBooks = (state) => state.bookSearch.books;
export const selectResultsCount = (state) => state.bookSearch.resultsCount;
export const selectInputValue = (state) => state.bookSearch.inputValue;
export const selectSubject = (state) => state.bookSearch.subject;
export const selectOrder = (state) => state.bookSearch.order;
export const selectStartIndex = (state) => state.bookSearch.startIndex;

export default bookSearchSlice.reducer;
